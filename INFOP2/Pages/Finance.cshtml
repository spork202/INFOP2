@page
@model INFOP2.Pages.Finance
@{
    ViewData["Title"] = "Finance";
    Layout = "_Layout";
}

<div class="container-fluid px-4 py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div>
                    <h2 class="fw-bold mb-1">@ViewData["Title"]</h2>
                    <p class="text-muted mb-0">Manage your financial transactions</p>
                </div>
                <div class="text-end">
                    <h4 class="h6 mb-1">Welcome back,</h4>
                    <p class="text-primary mb-0 fw-bold">@User.Identity?.Name</p>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4 g-3">
        <!-- Total Income Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-0 rounded-4 bg-gradient">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="icon-container me-3 bg-success bg-opacity-10 rounded-3 p-3">
                            <i class="fa-solid fa-arrow-up text-success fa-xl"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-muted small text-uppercase fw-semibold">Total Income</h6>
                            <h4 class="card-title mb-0 fw-bold" id="total-income">0.00</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Expenses Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-0 rounded-4 bg-gradient">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="icon-container me-3 bg-danger bg-opacity-10 rounded-3 p-3">
                            <i class="fa-solid fa-arrow-down text-danger fa-xl"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-muted small text-uppercase fw-semibold">Total Expenses</h6>
                            <h4 class="card-title mb-0 fw-bold" id="total-expenses">0.00</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Net Balance Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-0 rounded-4 bg-gradient">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="icon-container me-3 bg-primary bg-opacity-10 rounded-3 p-3">
                            <i class="fa-solid fa-balance-scale text-primary fa-xl"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-muted small text-uppercase fw-semibold">Net Balance</h6>
                            <h4 class="card-title mb-0 fw-bold" id="net-balance">0.00</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Average Monthly Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-0 rounded-4 bg-gradient">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="icon-container me-3 bg-info bg-opacity-10 rounded-3 p-3">
                            <i class="fa-solid fa-chart-line text-info fa-xl"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-muted small text-uppercase fw-semibold">Monthly Averages</h6>
                            <div class="d-flex justify-content-between">
                                <div>
                                    <small class="text-muted">Income</small>
                                    <h5 class="mb-0 fw-bold" id="avg-monthly-income">0.00</h5>
                                </div>
                                <div>
                                    <small class="text-muted">Expenses</small>
                                    <h5 class="mb-0 fw-bold" id="avg-monthly-expenses">0.00</h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Chart -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-0 rounded-4">
                <div class="card-body p-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title fw-semibold mb-0">Income vs Expenses (Monthly)</h5>
                    </div>
                    <canvas id="financeChart" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Detailed Charts Section -->
    <div class="row mb-4 g-3">
        <!-- Monthly Trends Chart -->
        <div class="col-md-6">
            <div class="card shadow-sm border-0 rounded-4 h-100">
                <div class="card-body p-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title fw-semibold mb-0">Monthly Trends</h5>
                    </div>
                    <canvas id="trendsChart" height="250"></canvas>
                </div>
            </div>
        </div>

        <!-- Category Distribution Chart -->
        <div class="col-md-6">
            <div class="card shadow-sm border-0 rounded-4 h-100">
                <div class="card-body p-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title fw-semibold mb-0">Category Distribution</h5>
                    </div>
                    <canvas id="categoryChart" height="250"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Add Button -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-6 mb-3 mb-md-0">
            <form id="search-form" method="get" class="d-flex">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="fa-solid fa-search text-muted"></i>
                    </span>
                    <input type="text" class="form-control border-start-0" placeholder="Search by description..." asp-for="SearchTerm" id="search-term" />
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </form>
        </div>
        <div class="col-md-6 d-flex justify-content-end mb-3 gap-2">
            <button id="add-btn" class="btn btn-success d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#addModal">
                <i class="fa-solid fa-plus me-2"></i> Add Transaction
            </button>
            <button class="btn btn-outline-secondary d-flex align-items-center" id="exportBtnFinance" data-bs-tooltip="tooltip" title="Export to Excel">
                <i class="fa-solid fa-download me-2"></i> Export
            </button>
        </div>
    </div>

    <!-- Table Section -->
    <div class="card border-0 shadow-sm rounded-4">
        <div class="card-header bg-white border-0 py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 fw-semibold">Transaction List</h5>
                <a href="#" class="text-primary small text-decoration-none">View More <i class="fa-solid fa-arrow-right ms-1"></i></a>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr class="text-uppercase small text-muted">
                            <th class="ps-4">
                                <a id="sort-description" href="#" class="text-decoration-none text-dark d-flex align-items-center">
                                    Description <i class="fa-solid fa-sort ms-2"></i>
                                </a>
                            </th>
                            <th>Amount</th>
                            <th>Category</th>
                            <th>Date</th>
                            <th>Notes</th>
                            <th class="text-end pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="transaction-table-body">
                        <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center mt-4">
        <small class="text-muted" id="pagination-info"></small>
        <nav>
            <ul class="pagination pagination-sm mb-0">
                <!-- Dynamically populated -->
            </ul>
        </nav>
    </div>

    <!-- No Data -->
    <div id="no-data" class="text-center mt-5 d-none">
        <div class="py-5">
            <i class="fa-solid fa-money-bill-wave fa-3x text-muted mb-3"></i>
            <p class="text-muted mb-0">No transactions in the list. Click "Add Transaction" to start.</p>
        </div>
    </div>

    <!-- Add Modal -->
    <div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-success text-light rounded-top">
                    <h5 class="modal-title" id="addModalLabel">Add Transaction</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label for="add-description" class="form-label fw-semibold">Description</label>
                        <input id="add-description" class="form-control" required />
                        <span id="add-description-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-amount" class="form-label fw-semibold">Amount</label>
                        <input id="add-amount" class="form-control" type="number" step="0.01" required />
                        <span id="add-amount-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-category" class="form-label fw-semibold">Category</label>
                        <select id="add-category" class="form-select" required>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="add-date" class="form-label fw-semibold">Date</label>
                        <input id="add-date" class="form-control" type="date" />
                    </div>
                    <div class="mb-3">
                        <label for="add-notes" class="form-label fw-semibold">Notes</label>
                        <textarea id="add-notes" class="form-control"></textarea>
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="addTransaction()">Save Transaction</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-primary text-light rounded-top">
                    <h5 class="modal-title" id="editModalLabel">Edit Transaction</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <input type="hidden" id="edit-id" />
                    <div class="mb-3">
                        <label for="edit-description" class="form-label fw-semibold">Description</label>
                        <input id="edit-description" class="form-control" required />
                        <span id="edit-description-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-amount" class="form-label fw-semibold">Amount</label>
                        <input id="edit-amount" class="form-control" type="number" step="0.01" required />
                        <span id="edit-amount-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-category" class="form-label fw-semibold">Category</label>
                        <select id="edit-category" class="form-select" required>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-date" class="form-label fw-semibold">Date</label>
                        <input id="edit-date" class="form-control" type="date" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-notes" class="form-label fw-semibold">Notes</label>
                        <textarea id="edit-notes" class="form-control"></textarea>
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updateTransaction()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Event Modal -->
    <div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-danger text-white rounded-top">
                    <h5 class="modal-title" id="deleteEventModalLabel">Delete Transaction</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4 text-center">
                    <i class="fa-solid fa-triangle-exclamation text-danger fa-3x mb-3"></i>
                    <p class="mb-0">Are you sure you want to delete this transaction?</p>
                    <p class="text-muted small">This action cannot be undone.</p>
                    <input type="hidden" id="delete-event-id" />
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Firebase Compatibility SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>

    <!-- Initialize Firebase -->
    <script>
        // Declare db globally
        let db = null;

        try {
            const firebaseConfig = @Html.Raw(Model.FirebaseConfigJson);
            console.log("Firebase Config:", firebaseConfig);
            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                throw new Error("Firebase configuration is empty or invalid");
            }
            const app = firebase.initializeApp(firebaseConfig);
            db = firebase.firestore();
            console.log("Firebase initialized successfully, db:", !!db);
        } catch (error) {
            console.error("Firebase initialization error:", error);
        }
    </script>

    <!-- Include Chart.js for the bar chart -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
        let transactions = [];
        let currentPage = @Model.CurrentPage;
        const pageSize = @Model.PageSize;
        let totalItems = 0;
        let totalPages = 0;
        let sortOrder = '@Model.SortOrder' || 'description_asc';
        let searchTerm = '@Model.SearchTerm' || '';

        // Chart instances
        let financeChart;
        let trendsChart;
        let categoryChart;

        // Load Transactions on page load
        window.onload = function () {
            loadTransactions();
        };

        // Load Transactions from Firestore
        function loadTransactions() {
            let query = db.collection('transactions');
            if (searchTerm) {
                query = query.where('Description', '>=', searchTerm.toLowerCase())
                             .where('Description', '<=', searchTerm.toLowerCase() + '\uf8ff');
            }
            query.get().then(snapshot => {
                transactions = [];
                snapshot.forEach(doc => {
                    const data = doc.data();
                    transactions.push({
                        Id: doc.id,
                        Description: data.DisplayDescription,
                        Amount: data.Amount,
                        Category: data.Category,
                        Date: data.Date ? new Date(data.Date.seconds * 1000) : null,
                        Notes: data.Notes || ''
                    });
                });
                // Sort
                if (sortOrder === 'description_desc') {
                    transactions.sort((a, b) => {
                        const descA = a.Description || '';
                        const descB = b.Description || '';
                        return descB.localeCompare(descA);
                    });
                } else {
                    transactions.sort((a, b) => {
                        const descA = a.Description || '';
                        const descB = b.Description || '';
                        return descA.localeCompare(descB);
                    });
                }
                totalItems = transactions.length;
                totalPages = Math.ceil(totalItems / pageSize);
                currentPage = Math.max(1, Math.min(currentPage, totalPages));
                renderTable();
                updatePagination();
                updateSummary();
                updateAllCharts();
                if (transactions.length === 0) {
                    document.getElementById('no-data').classList.remove('d-none');
                } else {
                    document.getElementById('no-data').classList.add('d-none');
                }
            }).catch(error => {
                console.error("Error loading transactions:", error);
                document.getElementById('table-container').style.display = 'none';
                document.getElementById('no-data').innerHTML = '<p class="text-danger">Failed to load transactions. Please try again later.</p>';
                document.getElementById('no-data').style.display = 'block';
            });
        }

        // Render Table
        function renderTable() {
            const tbody = document.getElementById('transaction-table-body');
            tbody.innerHTML = '';
            const start = (currentPage - 1) * pageSize;
            const end = Math.min(start + pageSize, transactions.length);
            for (let i = start; i < end; i++) {
                const transaction = transactions[i];
                const row = `
                    <tr>
                        <td>${transaction.Description}</td>
                        <td>${transaction.Amount.toFixed(2)}</td>
                        <td><span class="badge px-3 py-2 ${transaction.Category === 'Income' ? 'bg-success' : 'bg-danger'}">${transaction.Category}</span></td>
                        <td>${transaction.Date ? transaction.Date.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }) : ''}</td>
                        <td>${transaction.Notes}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" data-bs-tooltop="tooltip" title="Edit" onclick="openEdit('${transaction.Id}')"><i class="fa-solid fa-edit"></i></button>
                            <button class="btn btn-sm btn-danger" data-bs-tooltop="tooltip" title="Delete" onclick="openDeleteEvent('${transaction.Id}')"><i class="fa-solid fa-trash"></i></button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            }
        }

        // Update Summary
        function updateSummary() {
            let totalIncome = 0;
            let totalExpenses = 0;
            transactions.forEach(transaction => {
                if (transaction.Category === 'Income') {
                    totalIncome += transaction.Amount;
                } else if (transaction.Category === 'Expense') {
                    totalExpenses += transaction.Amount;
                }
            });
            const netBalance = totalIncome - totalExpenses;
            document.getElementById('total-income').innerText = totalIncome.toFixed(2);
            document.getElementById('total-expenses').innerText = totalExpenses.toFixed(2);
            document.getElementById('net-balance').innerText = netBalance.toFixed(2);
            document.getElementById('net-balance').parentElement.className = netBalance >= 0 ? 'text-success' : 'text-danger';
            
            // Calculate and update monthly averages
            updateMonthlyAverages();
        }

        // Calculate and Update Monthly Averages
        function updateMonthlyAverages() {
            const monthlyData = {};
            const currentYear = new Date().getFullYear();
            
            // Initialize monthly data for the current year
            for (let month = 0; month < 12; month++) {
                const monthKey = `${currentYear}-${month + 1}`;
                monthlyData[monthKey] = { income: 0, expenses: 0, hasTransactions: false };
            }

            // Aggregate transactions by month
            transactions.forEach(transaction => {
                if (transaction.Date) {
                    const year = transaction.Date.getFullYear();
                    const month = transaction.Date.getMonth() + 1;
                    const monthKey = `${year}-${month}`;
                    
                    if (monthlyData[monthKey]) {
                        monthlyData[monthKey].hasTransactions = true;
                        if (transaction.Category === 'Income') {
                            monthlyData[monthKey].income += transaction.Amount;
                        } else if (transaction.Category === 'Expense') {
                            monthlyData[monthKey].expenses += transaction.Amount;
                        }
                    }
                }
            });

            // Calculate averages only for months with transactions
            let totalMonthsWithTransactions = 0;
            let totalMonthlyIncome = 0;
            let totalMonthlyExpenses = 0;

            Object.values(monthlyData).forEach(monthData => {
                if (monthData.hasTransactions) {
                    totalMonthsWithTransactions++;
                    totalMonthlyIncome += monthData.income;
                    totalMonthlyExpenses += monthData.expenses;
                }
            });

            // Calculate and display averages
            const avgMonthlyIncome = totalMonthsWithTransactions > 0 ? totalMonthlyIncome / totalMonthsWithTransactions : 0;
            const avgMonthlyExpenses = totalMonthsWithTransactions > 0 ? totalMonthlyExpenses / totalMonthsWithTransactions : 0;

            document.getElementById('avg-monthly-income').innerText = avgMonthlyIncome.toFixed(2);
            document.getElementById('avg-monthly-expenses').innerText = avgMonthlyExpenses.toFixed(2);
        }

        // Update all charts
        function updateAllCharts() {
            updateFinanceChart();
            updateTrendsChart();
            updateCategoryChart();
        }

        // Update Finance Chart
        function updateFinanceChart() {
            const monthlyData = {};
            const currentYear = new Date().getFullYear();
            for (let month = 0; month < 12; month++) {
                const monthKey = `${currentYear}-${month + 1}`;
                monthlyData[monthKey] = { income: 0, expenses: 0 };
            }
            transactions.forEach(transaction => {
                if (transaction.Date) {
                    const year = transaction.Date.getFullYear();
                    const month = transaction.Date.getMonth() + 1;
                    const monthKey = `${year}-${month}`;
                    if (monthlyData[monthKey]) {
                        if (transaction.Category === 'Income') {
                            monthlyData[monthKey].income += transaction.Amount;
                        } else if (transaction.Category === 'Expense') {
                            monthlyData[monthKey].expenses += transaction.Amount;
                        }
                    }
                }
            });
            const labels = Object.keys(monthlyData).map(key => {
                const [year, month] = key.split('-');
                return new Date(year, month - 1).toLocaleString('default', { month: 'short' });
            });
            const incomeData = Object.values(monthlyData).map(data => data.income);
            const expensesData = Object.values(monthlyData).map(data => data.expenses);
            if (financeChart) {
                financeChart.destroy();
            }
            const ctx = document.getElementById('financeChart').getContext('2d');
            financeChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Income',
                            data: incomeData,
                            backgroundColor: 'rgba(40, 167, 69, 0.6)',
                            borderColor: 'rgba(40, 167, 69, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Expenses',
                            data: expensesData,
                            backgroundColor: 'rgba(220, 53, 69, 0.6)',
                            borderColor: 'rgba(220, 53, 69, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Amount' } },
                        x: { title: { display: true, text: 'Month' } }
                    },
                    plugins: { legend: { position: 'top' } }
                }
            });
        }

        // Update Trends Chart
        function updateTrendsChart() {
            const monthlyData = {};
            const currentYear = new Date().getFullYear();
            const lastYear = currentYear - 1;
            
            // Initialize data for last 12 months
            for (let i = 0; i < 12; i++) {
                const date = new Date(currentYear, new Date().getMonth() - i, 1);
                const monthKey = date.toLocaleString('default', { month: 'short', year: 'numeric' });
                monthlyData[monthKey] = { income: 0, expenses: 0, net: 0 };
            }

            // Aggregate data
            transactions.forEach(transaction => {
                if (transaction.Date) {
                    const date = transaction.Date;
                    const monthKey = date.toLocaleString('default', { month: 'short', year: 'numeric' });
                    if (monthlyData[monthKey]) {
                        if (transaction.Category === 'Income') {
                            monthlyData[monthKey].income += transaction.Amount;
                        } else if (transaction.Category === 'Expense') {
                            monthlyData[monthKey].expenses += transaction.Amount;
                        }
                        monthlyData[monthKey].net = monthlyData[monthKey].income - monthlyData[monthKey].expenses;
                    }
                }
            });

            // Prepare data for chart
            const labels = Object.keys(monthlyData).reverse();
            const incomeData = labels.map(key => monthlyData[key].income);
            const expensesData = labels.map(key => monthlyData[key].expenses);
            const netData = labels.map(key => monthlyData[key].net);

            if (trendsChart) {
                trendsChart.destroy();
            }

            const ctx = document.getElementById('trendsChart').getContext('2d');
            trendsChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Income',
                            data: incomeData,
                            borderColor: 'rgba(40, 167, 69, 1)',
                            backgroundColor: 'rgba(40, 167, 69, 0.1)',
                            fill: true,
                            tension: 0.4
                        },
                        {
                            label: 'Expenses',
                            data: expensesData,
                            borderColor: 'rgba(220, 53, 69, 1)',
                            backgroundColor: 'rgba(220, 53, 69, 0.1)',
                            fill: true,
                            tension: 0.4
                        },
                        {
                            label: 'Net',
                            data: netData,
                            borderColor: 'rgba(13, 110, 253, 1)',
                            backgroundColor: 'rgba(13, 110, 253, 0.1)',
                            fill: true,
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Amount' } },
                        x: { title: { display: true, text: 'Month' } }
                    },
                    plugins: { legend: { position: 'top' } }
                }
            });
        }

        // Update Category Chart
        function updateCategoryChart() {
            const categoryData = {
                Income: { total: 0, count: 0 },
                Expense: { total: 0, count: 0 }
            };

            // Aggregate data by category
            transactions.forEach(transaction => {
                if (transaction.Category in categoryData) {
                    categoryData[transaction.Category].total += transaction.Amount;
                    categoryData[transaction.Category].count++;
                }
            });

            // Calculate averages
            const labels = Object.keys(categoryData);
            const data = labels.map(category => categoryData[category].total);
            const counts = labels.map(category => categoryData[category].count);

            if (categoryChart) {
                categoryChart.destroy();
            }

            const ctx = document.getElementById('categoryChart').getContext('2d');
            categoryChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: [
                            'rgba(40, 167, 69, 0.8)',
                            'rgba(220, 53, 69, 0.8)'
                        ],
                        borderColor: [
                            'rgba(40, 167, 69, 1)',
                            'rgba(220, 53, 69, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const count = counts[context.dataIndex];
                                    return `${label}: $${value.toFixed(2)} (${count} transactions)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function updatePagination() {
            const start = currentPage === 1 ? 1 : (currentPage - 1) * pageSize + 1;
            const end = Math.min(currentPage * pageSize, totalItems);
            document.getElementById('pagination-info').innerText = `${start}-${end} of ${totalItems} | Page ${currentPage}`;

            const pagination = document.querySelector('.pagination');
            pagination.innerHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}" id="prev-page">
                    <a class="page-link" href="#" aria-label="Previous"><i class="fa-solid fa-angle-left"></i></a>
                </li>
            `;

            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            pagination.innerHTML += `
                <li class="page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}" id="next-page">
                    <a class="page-link" href="#" aria-label="Next"><i class="fa-solid fa-angle-right"></i></a>
                </li>
            `;

            document.querySelectorAll('#prev-page a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage > 1) changePage(currentPage - 1);
                });
            });

            document.querySelectorAll('#next-page a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) changePage(currentPage + 1);
                });
            });
        }

        function changePage(page) {
            currentPage = page;
            renderTable();
            updatePagination();
        }

        // Add Transaction
        function addTransaction() {
            const description = document.getElementById('add-description').value;
            const amount = parseFloat(document.getElementById('add-amount').value);
            const category = document.getElementById('add-category').value;
            const date = document.getElementById('add-date').value;
            const notes = document.getElementById('add-notes').value;
            if (!description) {
                document.getElementById('add-description-error').innerText = 'Description is required';
                return;
            }
            if (!amount || amount <= 0) {
                document.getElementById('add-amount-error').innerText = 'Amount must be greater than 0';
                return;
            }
            const transaction = {
                Description: description.toLowerCase(),
                DisplayDescription: description,
                Amount: amount,
                Category: category,
                Date: date ? new Date(date) : null,
                Notes: notes,
                userId: null // Placeholder for no authentication
            };
            db.collection('transactions').add(transaction).then(() => {
                $('#addModal').modal('hide');
                loadTransactions();
            }).catch(error => {
                console.error("Error adding transaction:", error);
                alert("Failed to add transaction. Please try again.");
            });
        }

        // Open Edit Modal
        function openEdit(id) {
            const transaction = transactions.find(t => t.Id === id);
            if (transaction) {
                document.getElementById('edit-id').value = transaction.Id;
                document.getElementById('edit-description').value = transaction.Description;
                document.getElementById('edit-amount').value = transaction.Amount;
                document.getElementById('edit-category').value = transaction.Category;
                document.getElementById('edit-date').value = transaction.Date ? transaction.Date.toISOString().split('T')[0] : '';
                document.getElementById('edit-notes').value = transaction.Notes;
                $('#editModal').modal('show');
            }
        }

        // Update Transaction
        function updateTransaction() {
            const id = document.getElementById('edit-id').value;
            const description = document.getElementById('edit-description').value;
            const amount = parseFloat(document.getElementById('edit-amount').value);
            const category = document.getElementById('edit-category').value;
            const date = document.getElementById('edit-date').value;
            const notes = document.getElementById('edit-notes').value;
            if (!description) {
                document.getElementById('edit-description-error').innerText = 'Description is required';
                return;
            }
            if (!amount || amount <= 0) {
                document.getElementById('edit-amount-error').innerText = 'Amount must be greater than 0';
                return;
            }
            const transaction = {
                Description: description.toLowerCase(),
                DisplayDescription: description,
                Amount: amount,
                Category: category,
                Date: date ? new Date(date) : null,
                Notes: notes,
                userId: null // Placeholder for no authentication
            };
            db.collection('transactions').doc(id).update(transaction).then(() => {
                $('#editModal').modal('hide');
                loadTransactions();
            }).catch(error => {
                console.error("Error updating transaction:", error);
                alert("Failed to update transaction. Please try again.");
            });
        }

        // Open Delete Event Modal
        function openDeleteEvent(id) {
            document.getElementById('delete-event-id').value = id;
            $('#deleteEventModal').modal('show');
        }

        // Delete Transaction
        document.getElementById('confirm-delete').addEventListener('click', function () {
            const id = document.getElementById('delete-event-id').value;
            db.collection('transactions').doc(id).delete().then(() => {
                $('#deleteEventModal').modal('hide');
                loadTransactions();
                showSuccess("Transaction deleted successfully!");
            }).catch(error => {
                console.error("Error deleting event:", error);
                showError("Failed to delete event. Please try again.");
            });
        });

        // Show Success Message
        function showSuccess(message) {
            const successCard = document.getElementById('success-card');
            const successMessage = document.getElementById('success-message');
            if (successCard && successMessage) {
                successMessage.innerText = message;
                successCard.classList.remove('d-none');
                setTimeout(() => successCard.classList.add('d-none'), 5000);
            } else {
                console.error("Success card or message element not found");
            }
        }

        // Show Error Message
        function showError(message) {
            const container = document.getElementById('events-container');
            if (container) {
                container.innerHTML = `<p class="text-danger text-center">${message}</p>`;
            } else {
                console.error("Events container not found");
            }
        }
        
        // Search Handler
        document.getElementById('search-form').addEventListener('submit', (e) => {
            e.preventDefault();
            searchTerm = document.getElementById('search-term').value;
            currentPage = 1;
            window.location.href = `/Finance?CurrentPage=${currentPage}&SearchTerm=${searchTerm}&SortOrder=${sortOrder}`;
        });

        // Sort Handler
        document.getElementById('sort-description').addEventListener('click', (e) => {
            e.preventDefault();
            sortOrder = sortOrder === 'description_asc' ? 'description_desc' : 'description_asc';
            window.location.href = `/Finance?CurrentPage=${currentPage}&SearchTerm=${searchTerm}&SortOrder=${sortOrder}`;
        });
    </script>
}