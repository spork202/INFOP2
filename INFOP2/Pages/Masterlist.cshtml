@page
@model INFOP2.Pages.Masterlist
@{
    ViewData["Title"] = "Masterlist";
    Layout = "_Layout";
}

<style>
    /* Copy all button styling */
    .copy-all-btn {
        font-size: 14px;
    }
    /* Feedback message styling */
    .copy-feedback {
        position: absolute;
        background: #28a745;
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .copy-feedback.show {
        opacity: 1;
    }
</style>

<div class="container-fluid px-4 py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div>
                    <h2 class="fw-bold mb-1">@ViewData["Title"]</h2>
                    <p class="text-muted mb-0">Manage your people</p>
                </div>
                <div class="text-end">
                    <h4 class="h6 mb-1">Welcome back,</h4>
                    <p class="text-primary mb-0 fw-bold">@User.Identity?.Name</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Card -->
    <div id="success-card" class="card border-success shadow-sm mb-4 d-none">
        <div class="card-body d-flex justify-content-between align-items-center">
            <div>
                <h5 class="card-title text-success mb-1">Success!</h5>
                <p class="card-text" id="success-message">Action completed successfully!</p>
            </div>
            <button type="button" class="btn-close" aria-label="Close" onclick="$('#success-card').addClass('d-none');"></button>
        </div>
    </div>
    
    <div class="row mb-4 g-3">
        <!-- Total People Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-0 rounded-4 bg-gradient">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="icon-container me-3 bg-primary bg-opacity-10 rounded-3 p-3">
                            <i class="fa-solid fa-users text-primary fa-xl"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-muted small text-uppercase fw-semibold">Total People</h6>
                            <h4 class="card-title mb-0 fw-bold" id="total-people">0</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- BS Families Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-0 rounded-4 bg-gradient">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="icon-container me-3 bg-success bg-opacity-10 rounded-3 p-3">
                            <i class="fa-solid fa-home text-success fa-xl"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-muted small text-uppercase fw-semibold">BS Families</h6>
                            <h4 class="card-title mb-0 fw-bold" id="bs-families">0</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ministries Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-0 rounded-4 bg-gradient">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="icon-container me-3 bg-warning bg-opacity-10 rounded-3 p-3">
                            <i class="fa-solid fa-church text-warning fa-xl"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-muted small text-uppercase fw-semibold">Ministries</h6>
                            <h4 class="card-title mb-0 fw-bold" id="ministries">0</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Chart -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-0 rounded-4">
                <div class="card-body p-4">
                    <h5 class="card-title fw-semibold mb-3">People by BS Family</h5>
                    <canvas id="masterlistChart" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Add Button -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-6 mb-3 mb-md-0">
            <form id="search-form" method="get" class="d-flex">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="fa-solid fa-search text-muted"></i>
                    </span>
                    <input type="text" class="form-control border-start-0" placeholder="Search by name..." asp-for="SearchTerm" id="search-term" />
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </form>
        </div>
        <div class="col-md-6 d-flex justify-content-end mb-3 gap-2">
            <button id="add-btn" class="btn btn-success d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#addModal">
                <i class="fa-solid fa-plus me-2"></i> Add Person
            </button>
            <button class="btn btn-outline-secondary d-flex align-items-center" id="exportBtnMaster" data-bs-tooltip="tooltip" title="Export to Excel">
                <i class="fa-solid fa-download me-2"></i> Export
            </button>
            <button class="btn btn-outline-secondary d-flex align-items-center copy-all-btn" onclick="copyAllData(this)" title="Copy all people data" aria-label="Copy all people data">
                <i class="fa-solid fa-copy me-2"></i> Copy All
            </button>
        </div>
    </div>

    <!-- Table Section -->
    <div class="card border-0 shadow-sm rounded-4">
        <div class="card-header bg-white border-0 py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 fw-semibold">People List</h5>
                <a href="#" class="text-primary small text-decoration-none">View More <i class="fa-solid fa-arrow-right ms-1"></i></a>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr class="text-uppercase small text-muted">
                            <th class="ps-4">
                                <a id="sort-name" href="#" class="text-decoration-none text-dark d-flex align-items-center">
                                    Name <i class="fa-solid fa-sort ms-2"></i>
                                </a>
                            </th>
                            <th>BS Family</th>
                            <th>Ministry</th>
                            <th>Contact No.</th>
                            <th>KSA Address</th>
                            <th>Birthdate</th>
                            <th class="text-end pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="person-table-body">
                    <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center mt-4">
        <small class="text-muted" id="pagination-info"></small>
        <nav>
            <ul class="pagination pagination-sm mb-0">
                <!-- Dynamically populated -->
            </ul>
        </nav>
    </div>

    <!-- No Data -->
    <div id="no-data" class="text-center mt-5 d-none">
        <div class="py-5">
            <i class="fa-solid fa-users fa-3x text-muted mb-3"></i>
            <p class="text-muted mb-0">No people in the list. Click "Add Person" to start.</p>
        </div>
    </div>

    <!-- Add Modal -->
    <div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-success text-light rounded-top">
                    <h5 class="modal-title" id="addModalLabel">Add Person</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label for="add-name" class="form-label fw-semibold">Name</label>
                        <input id="add-name" class="form-control" required />
                        <span id="add-name-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-bsfamily" class="form-label fw-semibold">BS Family</label>
                        <select id="add-bsfamily" class="form-select" required>
                            <option value="" disabled selected>Select BS Family</option>
                            <option value="None">None</option>
                            <!-- Populated by JavaScript -->
                        </select>
                        <span id="add-bsfamily-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-ministry" class="form-label fw-semibold">Ministry</label>
                        <select id="add-ministry" class="form-select" required>
                            <option value="" disabled selected>Select Ministry</option>
                            <option value="None">None</option>
                            <!-- Populated by JavaScript -->
                        </select>
                        <span id="add-ministry-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-contactnumber" class="form-label fw-semibold">Contact No.</label>
                        <input id="add-contactnumber" class="form-control" type="tel" />
                        <span id="add-contactnumber-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-ksaaddress" class="form-label fw-semibold">KSA Address</label>
                        <input id="add-ksaaddress" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="add-birthdate" class="form-label fw-semibold">Birthdate</label>
                        <input id="add-birthdate" class="form-control" type="date" />
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="addPerson()">Save Person</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-primary text-light rounded-top">
                    <h5 class="modal-title" id="editModalLabel">Edit Person</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <input type="hidden" id="edit-id" />
                    <div class="mb-3">
                        <label for="edit-name" class="form-label fw-semibold">Name</label>
                        <input id="edit-name" class="form-control" required />
                        <span id="edit-name-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-bsfamily" class="form-label fw-semibold">BS Family</label>
                        <select id="edit-bsfamily" class="form-select" required>
                            <option value="" disabled>Select BS Family</option>
                            <option value="None">None</option>
                            <!-- Populated by JavaScript -->
                        </select>
                        <span id="edit-bsfamily-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-ministry" class="form-label fw-semibold">Ministry</label>
                        <select id="edit-ministry" class="form-select" required>
                            <option value="" disabled>Select Ministry</option>
                            <option value="None">None</option>
                            <!-- Populated by JavaScript -->
                        </select>
                        <span id="edit-ministry-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-contactnumber" class="form-label fw-semibold">Contact No.</label>
                        <input id="edit-contactnumber" class="form-control" type="tel" />
                        <span id="edit-contactnumber-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-ksaaddress" class="form-label fw-semibold">KSA Address</label>
                        <input id="edit-ksaaddress" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-birthdate" class="form-label fw-semibold">Birthdate</label>
                        <input id="edit-birthdate" class="form-control" type="date" />
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updatePerson()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Event Modal -->
    <div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-danger text-white rounded-top">
                    <h5 class="modal-title" id="deleteEventModalLabel">Delete Person</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4 text-center">
                    <i class="fa-solid fa-triangle-exclamation text-danger fa-3x mb-3"></i>
                    <p class="mb-0">Are you sure you want to delete this person?</p>
                    <p class="text-muted small">This action cannot be undone.</p>
                    <input type="hidden" id="delete-event-id" />
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Firebase Compatibility SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>

    <!-- Initialize Firebase -->
    <script>
        // Declare db globally
        let db = null;

        try {
            const firebaseConfig = @Html.Raw(Model.FirebaseConfigJson);
            console.log("Firebase Config:", firebaseConfig);
            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                throw new Error("Firebase configuration is empty or invalid");
            }
            const app = firebase.initializeApp(firebaseConfig);
            db = firebase.firestore();
            console.log("Firebase initialized successfully, db:", !!db);
        } catch (error) {
            console.error("Firebase initialization error:", error);
        }
    </script>

    <!-- Chart.js and jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>

    <script>
        let people = [];
        let bsFamilies = [];
        let ministries = [];
        let currentPage = @Model.CurrentPage;
        const pageSize = @Model.PageSize;
        let totalItems = 0;
        let totalPages = 0;
        let sortOrder = '@Model.SortOrder' || 'name_asc';
        let searchTerm = '@Model.SearchTerm' || '';
        let masterlistChart;

        window.onload = function () {
            if (!db) {
                console.error("Firestore db is not initialized.");
                showError("Failed to load data. Please check Firebase configuration.");
                return;
            }
            loadCategories();
            loadPeople();
        };

        // Load Categories (BS Family and Ministry)
        async function loadCategories() {
            try {
                console.log("Loading categories from Firestore...");
                const snapshot = await db.collection('categories').get();
                console.log("Categories snapshot size:", snapshot.size);
                console.log("Category documents:", snapshot.docs.map(doc => ({ id: doc.id, data: doc.data() })));
                bsFamilies = [];
                ministries = [];

                for (const doc of snapshot.docs) {
                    const data = doc.data();
                    console.log("Processing category:", doc.id, data);
                    if (data.Title && data.Title.toLowerCase() === "bs family") {
                        console.log("Found BS Family category:", doc.id);
                        const itemsSnapshot = await db.collection('categories').doc(doc.id).collection('items').get();
                        console.log("BS Family items snapshot size:", itemsSnapshot.size);
                        console.log("BS Family items:", itemsSnapshot.docs.map(itemDoc => ({ id: itemDoc.id, data: itemDoc.data() })));
                        bsFamilies = itemsSnapshot.docs.map(itemDoc => ({
                            Id: itemDoc.id,
                            Name: itemDoc.data().Name || "Unknown"
                        }));
                    } else if (data.Title && data.Title.toLowerCase() === "ministry") {
                        console.log("Found Ministry category:", doc.id);
                        const itemsSnapshot = await db.collection('categories').doc(doc.id).collection('items').get();
                        console.log("Ministry items snapshot size:", itemsSnapshot.size);
                        console.log("Ministry items:", itemsSnapshot.docs.map(itemDoc => ({ id: itemDoc.id, data: itemDoc.data() })));
                        ministries = itemsSnapshot.docs.map(itemDoc => ({
                            Id: itemDoc.id,
                            Name: itemDoc.data().Name || "Unknown"
                        }));
                    }
                }

                console.log("BS Families:", bsFamilies);
                console.log("Ministries:", ministries);
                populateDropdowns();
            } catch (error) {
                console.error("Error loading categories:", error);
                showError(`Failed to load BS Families or Ministries: ${error.message}`);
            }
        }

        // Populate BS Family and Ministry Dropdowns
        function populateDropdowns() {
            const addBSFamily = document.getElementById('add-bsfamily');
            const editBSFamily = document.getElementById('edit-bsfamily');
            const addMinistry = document.getElementById('add-ministry');
            const editMinistry = document.getElementById('edit-ministry');

            // Clear existing options (except default and None)
            addBSFamily.innerHTML = '<option value="" disabled selected>Select BS Family</option><option value="None">None</option>';
            editBSFamily.innerHTML = '<option value="" disabled>Select BS Family</option><option value="None">None</option>';
            addMinistry.innerHTML = '<option value="" disabled selected>Select Ministry</option><option value="None">None</option>';
            editMinistry.innerHTML = '<option value="" disabled>Select Ministry</option><option value="None">None</option>';

            // Populate BS Family dropdowns
            bsFamilies.forEach(family => {
                const option = `<option value="${family.Name}">${family.Name}</option>`;
                addBSFamily.innerHTML += option;
                editBSFamily.innerHTML += option;
            });

            // Populate Ministry dropdowns
            ministries.forEach(ministry => {
                const option = `<option value="${ministry.Name}">${ministry.Name}</option>`;
                addMinistry.innerHTML += option;
                editMinistry.innerHTML += option;
            });
        }

        function loadPeople() {
            try {
                console.log("Loading people from Firestore...");
                let query = db.collection('people');
                if (searchTerm) {
                    query = query.where('Name', '>=', searchTerm.toLowerCase())
                                 .where('Name', '<=', searchTerm.toLowerCase() + '\uf8ff');
                }

                query.get().then(snapshot => {
                    people = [];
                    snapshot.forEach(doc => {
                        const data = doc.data();
                        people.push({
                            Id: doc.id,
                            Name: data.DisplayName || data.Name || '',
                            BSFamily: data.BSFamily || '',
                            Ministry: data.Ministry || '',
                            ContactNumber: data.ContactNumber || '',
                            KSAAddress: data.KSAAddress || '',
                            Birthdate: data.Birthdate ? new Date(data.Birthdate.seconds * 1000) : null
                        });
                    });

                    console.log("People loaded:", people.length);
                    if (sortOrder === 'name_desc') {
                        people.sort((a, b) => b.Name.localeCompare(a.Name));
                    } else {
                        people.sort((a, b) => a.Name.localeCompare(a.Name));
                    }

                    totalItems = people.length;
                    totalPages = Math.ceil(totalItems / pageSize);
                    currentPage = Math.max(1, Math.min(currentPage, totalPages));
                    renderTable();
                    updatePagination();
                    updateSummary();
                    updateChart();

                    document.getElementById('table-container').style.display = people.length ? 'block' : 'none';
                    document.getElementById('no-data').style.display = people.length ? 'none' : 'block';
                }).catch(error => {
                    console.error("Error loading people:", error);
                    showError("Error loading people from Firestore.");
                });
            } catch (error) {
                console.error("Unexpected error in loadPeople:", error);
                showError("Unexpected error loading data.");
            }
        }

        function renderTable() {
            const tbody = document.getElementById('person-table-body');
            tbody.innerHTML = '';
            const start = (currentPage - 1) * pageSize;
            const end = Math.min(start + pageSize, people.length);

            for (let i = start; i < end; i++) {
                const person = people[i];
                const row = `
                    <tr>
                        <td>${person.Name}</td>
                        <td>${person.BSFamily || 'N/A'}</td>
                        <td>${person.Ministry || 'N/A'}</td>
                        <td>${person.ContactNumber || 'N/A'}</td>
                        <td>${person.KSAAddress || 'N/A'}</td>
                        <td>${person.Birthdate ? person.Birthdate.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }) : 'N/A'}</td>
                        <td>
                            <button class="btn btn-sm btn-warning me-1" data-bs-tooltip="tooltip" title="Edit" onclick="openEdit('${person.Id}')"><i class="fa-solid fa-edit"></i></button>
                            <button class="btn btn-sm btn-danger" data-bs-tooltip="tooltip" title="Delete" onclick="openDeleteEvent('${person.Id}')"><i class="fa-solid fa-trash"></i></button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            }
        }

        function updateSummary() {
            const totalPeople = people.length;
            const bsFamiliesSet = [...new Set(people.map(p => p.BSFamily).filter(f => f && f !== 'None'))];
            const ministriesSet = [...new Set(people.map(p => p.Ministry).filter(m => m && m !== 'None'))];

            document.getElementById('total-people').innerText = totalPeople;
            document.getElementById('bs-families').innerText = bsFamiliesSet.length;
            document.getElementById('ministries').innerText = ministriesSet.length;
        }

        function updateChart() {
            const bsFamilyCounts = {};
            people.forEach(person => {
                const bsFamily = person.BSFamily || 'None';
                bsFamilyCounts[bsFamily] = (bsFamilyCounts[bsFamily] || 0) + 1;
            });

            const labels = Object.keys(bsFamilyCounts);
            const data = Object.values(bsFamilyCounts);
            const backgroundColors = labels.map((_, index) => `hsl(${(index * 360 / labels.length) % 360}, 70%, 60%)`);

            if (masterlistChart) {
                masterlistChart.destroy();
            }

            const ctx = document.getElementById('masterlistChart').getContext('2d');
            masterlistChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'People',
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: backgroundColors.map(color => color.replace('60%)', '50%)')),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'Number of People', color: '#718096', font: { size: 12 } },
                            ticks: { color: '#718096' },
                            grid: { color: '#edf2f7' }
                        },
                        x: {
                            title: { display: true, text: 'BS Family', color: '#718096', font: { size: 12 } },
                            ticks: { color: '#718096' },
                            grid: { display: false }
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        }
        
        function updatePagination() {
            const start = currentPage === 1 ? 1 : (currentPage - 1) * pageSize + 1;
            const end = Math.min(currentPage * pageSize, totalItems);
            document.getElementById('pagination-info').innerText = `${start}-${end} of ${totalItems} | Page ${currentPage}`;

            const pagination = document.querySelector('.pagination');
            pagination.innerHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}" id="prev-page">
                    <a class="page-link" href="#" aria-label="Previous"><i class="fa-solid fa-angle-left"></i></a>
                </li>
            `;

            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            pagination.innerHTML += `
                <li class="page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}" id="next-page">
                    <a class="page-link" href="#" aria-label="Next"><i class="fa-solid fa-angle-right"></i></a>
                </li>
            `;

            document.querySelectorAll('#prev-page a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage > 1) changePage(currentPage - 1);
                });
            });

            document.querySelectorAll('#next-page a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) changePage(currentPage + 1);
                });
            });
        }

        function changePage(page) {
            currentPage = page;
            renderTable();
            updatePagination();
        }

        // Copy All People Data
        function copyAllData(button) {
            if (people.length === 0) {
                showError('No people to copy.');
                return;
            }

            // Format people data in a messenger-friendly format
            const rows = people.map(person => {
                const birthdate = person.Birthdate
                    ? person.Birthdate.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })
                    : 'N/A';
                return [
                    `• Name: ${person.Name || 'N/A'}`,
                    `  - BS Family: ${person.BSFamily || 'N/A'}`,
                    `  - Ministry: ${person.Ministry || 'N/A'}`,
                    `  - Contact No.: ${person.ContactNumber || 'N/A'}`,
                    `  - KSA Address: ${person.KSAAddress || 'N/A'}`,
                    `  - Birthdate: ${birthdate}`
                ].join('\n');
            });

            // Join rows with double newlines for separation
            const textToCopy = rows.join('\n\n');

            // Use Clipboard API to copy text
            navigator.clipboard.writeText(textToCopy).then(() => {
                // Create feedback element
                const feedback = document.createElement('span');
                feedback.className = 'copy-feedback';
                feedback.innerText = 'Copied!';
                button.parentElement.appendChild(feedback);

                // Position feedback near the button
                const rect = button.getBoundingClientRect();
                feedback.style.top = `${rect.top - 30}px`;
                feedback.style.left = `${rect.left + rect.width / 2}px`;

                // Show feedback
                feedback.classList.add('show');

                // Remove feedback after 2 seconds
                setTimeout(() => {
                    feedback.classList.remove('show');
                    setTimeout(() => feedback.remove(), 300); // Wait for fade-out transition
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy all data:', err);
                showError('Failed to copy people data.');
            });
        }

        function addPerson() {
            if (!db) {
                console.error("Cannot add person: Firestore db is not initialized");
                showError("Failed to save person. Database not initialized.");
                return;
            }
            const name = document.getElementById('add-name').value.trim();
            const bsFamily = document.getElementById('add-bsfamily').value;
            const ministry = document.getElementById('add-ministry').value;
            const contactNumber = document.getElementById('add-contactnumber').value.trim();
            const ksaAddress = document.getElementById('add-ksaaddress').value.trim();
            const birthdate = document.getElementById('add-birthdate').value;

            // Reset errors
            document.getElementById('add-name-error').innerText = '';
            document.getElementById('add-bsfamily-error').innerText = '';
            document.getElementById('add-ministry-error').innerText = '';
            document.getElementById('add-contactnumber-error').innerText = '';

            if (!name) {
                document.getElementById('add-name-error').innerText = 'Name is required';
                return;
            }
            if (!bsFamily) {
                document.getElementById('add-bsfamily-error').innerText = 'BS Family is required';
                return;
            }
            if (!ministry) {
                document.getElementById('add-ministry-error').innerText = 'Ministry is required';
                return;
            }
            if (contactNumber && !/^\+?\d{10,15}$/.test(contactNumber)) {
                document.getElementById('add-contactnumber-error').innerText = 'Invalid phone number';
                return;
            }

            const person = {
                Name: name.toLowerCase(),
                DisplayName: name,
                BSFamily: bsFamily,
                Ministry: ministry,
                ContactNumber: contactNumber,
                KSAAddress: ksaAddress,
                Birthdate: birthdate ? new Date(birthdate) : null
            };

            db.collection('people').add(person).then(() => {
                $('#addModal').modal('hide');
                document.getElementById('add-name').value = '';
                document.getElementById('add-bsfamily').value = '';
                document.getElementById('add-ministry').value = '';
                document.getElementById('add-contactnumber').value = '';
                document.getElementById('add-ksaaddress').value = '';
                document.getElementById('add-birthdate').value = '';
                document.getElementById('add-name-error').innerText = '';
                document.getElementById('add-bsfamily-error').innerText = '';
                document.getElementById('add-ministry-error').innerText = '';
                document.getElementById('add-contactnumber-error').innerText = '';
                loadPeople();
                showSuccess("Person added successfully!");
            }).catch(error => {
                console.error("Error adding person:", error);
                showError("Failed to add person.");
            });
        }

        function openEdit(id) {
            const person = people.find(p => p.Id === id);
            if (person) {
                document.getElementById('edit-id').value = person.Id;
                document.getElementById('edit-name').value = person.Name;
                document.getElementById('edit-bsfamily').value = person.BSFamily || 'None';
                document.getElementById('edit-ministry').value = person.Ministry || 'None';
                document.getElementById('edit-contactnumber').value = person.ContactNumber || '';
                document.getElementById('edit-ksaaddress').value = person.KSAAddress || '';
                document.getElementById('edit-birthdate').value = person.Birthdate ? person.Birthdate.toISOString().split('T')[0] : '';
                $('#editModal').modal('show');
            }
        }

        function updatePerson() {
            if (!db) {
                console.error("Cannot update person: Firestore db is not initialized");
                showError("Failed to update person. Database not initialized.");
                return;
            }
            const id = document.getElementById('edit-id').value;
            const name = document.getElementById('edit-name').value.trim();
            const bsFamily = document.getElementById('edit-bsfamily').value;
            const ministry = document.getElementById('edit-ministry').value;
            const contactNumber = document.getElementById('edit-contactnumber').value.trim();
            const ksaAddress = document.getElementById('edit-ksaaddress').value.trim();
            const birthdate = document.getElementById('edit-birthdate').value;

            // Reset errors
            document.getElementById('edit-name-error').innerText = '';
            document.getElementById('edit-bsfamily-error').innerText = '';
            document.getElementById('edit-ministry-error').innerText = '';
            document.getElementById('edit-contactnumber-error').innerText = '';

            if (!name) {
                document.getElementById('edit-name-error').innerText = 'Name is required';
                return;
            }
            if (!bsFamily) {
                document.getElementById('edit-bsfamily-error').innerText = 'BS Family is required';
                return;
            }
            if (!ministry) {
                document.getElementById('edit-ministry-error').innerText = 'Ministry is required';
                return;
            }
            if (contactNumber && !/^\+?\d{10,15}$/.test(contactNumber)) {
                document.getElementById('edit-contactnumber-error').innerText = 'Invalid phone number';
                return;
            }

            const person = {
                Name: name.toLowerCase(),
                DisplayName: name,
                BSFamily: bsFamily,
                Ministry: ministry,
                ContactNumber: contactNumber,
                KSAAddress: ksaAddress,
                Birthdate: birthdate ? new Date(birthdate) : null
            };

            db.collection('people').doc(id).update(person).then(() => {
                $('#editModal').modal('hide');
                document.getElementById('edit-name-error').innerText = '';
                document.getElementById('edit-bsfamily-error').innerText = '';
                document.getElementById('edit-ministry-error').innerText = '';
                document.getElementById('edit-contactnumber-error').innerText = '';
                loadPeople();
                showSuccess("Person updated successfully!");
            }).catch(error => {
                console.error("Error updating person:", error);
                showError("Failed to update person.");
            });
        }

        function openDeleteEvent(id) {
            document.getElementById('delete-event-id').value = id;
            $('#deleteEventModal').modal('show');
        }

        document.getElementById('confirm-delete').addEventListener('click', function () {
            const id = document.getElementById('delete-event-id').value;
            db.collection('people').doc(id).delete().then(() => {
                $('#deleteEventModal').modal('hide');
                loadPeople();
                showSuccess("Records deleted successfully!");
            }).catch(error => {
                console.error("Error deleting record:", error);
                showError("Failed to delete record. Please try again.");
            });
        });
        
        function openDetail(id) {
            alert('Detail view for ID: ' + id);
        }

        // Show Success Message
        function showSuccess(message) {
            const successCard = document.getElementById('success-card');
            const successMessage = document.getElementById('success-message');
            if (successCard && successMessage) {
                successMessage.innerText = message;
                successCard.classList.remove('d-none');
                setTimeout(() => successCard.classList.add('d-none'), 5000);
            } else {
                console.error("Success card or message element not found");
            }
        }

        // Show Error Message
        function showError(message) {
            const noData = document.getElementById('no-data');
            if (noData) {
                noData.innerText = message;
                noData.style.display = 'block';
                document.getElementById('table-container').style.display = 'none';
            } else {
                console.error("No-data element not found");
            }
        }

        // Add null checks before adding event listeners
        const searchForm = document.getElementById('search-form');
        if (searchForm) {
            searchForm.addEventListener('submit', (e) => {
                e.preventDefault();
                searchTerm = document.getElementById('search-term').value;
                currentPage = 1;
                loadPeople();
            });
        }

        const sortName = document.getElementById('sort-name');
        if (sortName) {
            sortName.addEventListener('click', (e) => {
                e.preventDefault();
                sortOrder = sortOrder === 'name_asc' ? 'name_desc' : 'name_asc';
                loadPeople();
            });
        }

        const confirmDelete = document.getElementById('confirm-delete');
        if (confirmDelete) {
            confirmDelete.addEventListener('click', function () {
                const id = document.getElementById('delete-event-id').value;
                db.collection('people').doc(id).delete().then(() => {
                    $('#deleteEventModal').modal('hide');
                    loadPeople();
                    showSuccess("Records deleted successfully!");
                }).catch(error => {
                    console.error("Error deleting record:", error);
                    showError("Failed to delete record. Please try again.");
                });
            });
        }
    </script>
}