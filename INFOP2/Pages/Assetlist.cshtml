@page
@model INFOP2.Pages.Assetlist
@{
    ViewData["Title"] = "Asset List";
    Layout = "_Layout";
}
<div class="container mt-5">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h2 class="fw-bold">@ViewData["Title"]</h2>
            <h4 class="h6">Hello, <strong>@User.Identity?.Name</strong></h4>
        </div>
        <div class="col-12 d-flex justify-content-between align-items-center">
            <p class="text-muted">Manage and track your assets and equipment efficiently</p>
        </div>
    </div>
    
    <div class="row mb-5 g-3"> 
        <!-- Total Assets Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-start border-4 border-primary">
                <div class="card-body d-flex align-items-center p-3"> 
                    <div class="icon-container me-3" style="width: 40px; height: 40px;">
                        <i class="fa-solid fa-boxes text-primary fa-xl d-flex justify-content-center align-items-center h-100"></i>
                    </div>
                    <div class="flex-grow-1">
                        <h6 class="card-subtitle mb-1 text-muted small text-uppercase">Total Assets</h6>
                        <h4 class="card-title mb-0 fw-bold" id="total-assets">0</h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Consumable Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-start border-4 border-success">
                <div class="card-body d-flex align-items-center p-3">
                    <div class="icon-container me-3" style="width: 40px; height: 40px;">
                        <i class="fa-solid fa-check-circle text-success fa-xl d-flex justify-content-center align-items-center h-100"></i>
                    </div>
                    <div class="flex-grow-1">
                        <h6 class="card-subtitle mb-1 text-muted small text-uppercase">Total Consumables</h6>
                        <h4 class="card-title mb-0 fw-bold" id="consumable-assets">0</h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Non-Consumable Card -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100 border-start border-4 border-warning">
                <div class="card-body d-flex align-items-center p-3">
                    <div class="icon-container me-3" style="width: 40px; height: 40px;">
                        <i class="fa-solid fa-tools text-warning fa-xl d-flex justify-content-center align-items-center h-100"></i>
                    </div>
                    <div class="flex-grow-1">
                        <h6 class="card-subtitle mb-1 text-muted small text-uppercase">Total Non-Consumables</h6>
                        <h4 class="card-title mb-0 fw-bold" id="non-consumable-assets">0</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Search & Add Button -->
    <div class="row mb-3 align-items-center">
        <div class="col-md-6 mb-3 mb-md-0">
            <form id="search-form" method="get" class="d-flex">
                <input type="text" class="form-control me-2" placeholder="Search assets..." asp-for="SearchTerm" id="search-term" />
                <button type="submit" class="btn btn-outline-primary">Search</button>
            </form>
        </div>
        <div class="col-md-6 d-flex justify-content-end mb-3 gap-2">
            <button id="add-btn" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addModal">
                <i class="fas fa-plus me-1"></i> Add Asset
            </button>
            <button class="btn btn-outline-secondary" id="exportBtnAsset" data-bs-tooltip="tooltip" title="Export to Excel">
                <i class="fa fa-download"></i>
            </button>
        </div>
    </div>

    <!-- Table Header -->
    <div class="row mb-3">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h5>List of Assets</h5>
            <a href="#" class="text-primary small">View More</a>
        </div>
    </div>

    <!-- Asset Table -->
    <div class="table-responsive mb-4">
        <table class="table table-hover table-borderless align-middle">
            <thead class="table-light">
            <tr class="text-uppercase small text-muted">
                <th>
                    <a id="sort-name" asp-page="./Assetlist" asp-all-route-data="@(new Dictionary<string, string> { { "SortOrder", Model.SortOrder == "name_asc" ? "name_desc" : "name_asc" }, { "SearchTerm", Model.SearchTerm } })" class="text-decoration-none text-dark">
                        Item <span>@(Model.SortOrder == "name_asc" ? "▲" : Model.SortOrder == "name_desc" ? "▼" : "")</span>
                    </a>
                </th>
                <th>Date In</th>
                <th>Date Out</th>
                <th>Consumable/Non</th>
                <th>Remarks</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody id="asset-table-body">
            <!-- Dynamically populated -->
            </tbody>
        </table>
    </div>
    
    <!-- Pagination -->
    <div class="d-flex justify-content-end align-items-center mt-3" id="pagination-container">
        <small class="me-3 text-muted" id="pagination-info"></small>
        <nav>
            <ul class="pagination pagination-sm mb-0">
                <!-- Dynamically populated -->
            </ul>
        </nav>
    </div>

    <!-- No Data -->
    <div id="no-data" class="text-center mt-4 d-none">
        <p class="text-muted">No assets in the list. Click "Add Asset" to start.</p>
    </div>

    <!-- Add Modal -->
    <div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content border-0 shadow-sm">
                <div class="modal-header bg-success text-light">
                    <h5 class="modal-title" id="addModalLabel">Add Asset</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="add-name" class="form-label">Assets & Equipment</label>
                        <input id="add-name" class="form-control" required />
                        <span id="add-name-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-datein" class="form-label">Date In</label>
                        <input id="add-datein" class="form-control" type="date" required />
                        <span id="add-datein-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-dateout" class="form-label">Date Out</label>
                        <input id="add-dateout" class="form-control" type="date" />
                    </div>
                    <div class="mb-3">
                        <label for="add-consumable" class="form-label">Consumable/Non</label>
                        <select id="add-consumable" class="form-select" required>
                            <option value="" disabled selected>Select type</option>
                            <option value="Consumable">Consumable</option>
                            <option value="Non-Consumable">Non-Consumable</option>
                        </select>
                        <span id="add-consumable-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="add-remarks" class="form-label">Remarks</label>
                        <textarea id="add-remarks" class="form-control" rows="4"></textarea>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button class="btn btn-success" onclick="addAsset()">Add Asset</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content border-0 shadow-sm">
                <div class="modal-header bg-primary text-light">
                    <h5 class="modal-title" id="editModalLabel">Edit Asset</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="edit-id" />
                    <div class="mb-3">
                        <label for="edit-name" class="form-label">Assets & Equipment</label>
                        <input id="edit-name" class="form-control" required />
                        <span id="edit-name-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-datein" class="form-label">Date In</label>
                        <input id="edit-datein" class="form-control" type="date" required />
                        <span id="edit-datein-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-dateout" class="form-label">Date Out</label>
                        <input id="edit-dateout" class="form-control" type="date" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-consumable" class="form-label">Consumable/Non</label>
                        <select id="edit-consumable" class="form-select" required>
                            <option value="" disabled>Select type</option>
                            <option value="Consumable">Consumable</option>
                            <option value="Non-Consumable">Non-Consumable</option>
                        </select>
                        <span id="edit-consumable-error" class="text-danger small"></span>
                    </div>
                    <div class="mb-3">
                        <label for="edit-remarks" class="form-label">Remarks</label>
                        <textarea id="edit-remarks" class="form-control" rows="4"></textarea>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button class="btn btn-primary" onclick="updateAsset()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Event Modal -->
<div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-4 shadow">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteEventModalLabel">Delete Asset</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this asset?</p>
                <input type="hidden" id="delete-event-id" />
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
     <!-- Firebase Compatibility SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js"></script>
    <!-- Bootstrap JS (for modals) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Validation Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js"></script>

    <script>
        // Declare db globally
        let db = null;

        // Initialize Firebase
        try {
            const firebaseConfig = @Html.Raw(Model.FirebaseConfigJson);
            console.log("Firebase Config:", firebaseConfig);
            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                throw new Error("Firebase configuration is empty or invalid");
            }
            const app = firebase.initializeApp(firebaseConfig);
            db = firebase.firestore();
            console.log("Firebase initialized successfully, db:", !!db);
        } catch (error) {
            console.error("Firebase initialization error:", error);
        }

        let assets = [];
        let currentPage = @Model.CurrentPage;
        const pageSize = @Model.PageSize;
        let totalItems = 0;
        let totalPages = 0;
        let sortOrder = '@Model.SortOrder' || 'name_asc';
        let searchTerm = '@Model.SearchTerm' || '';

        // Load Assets on page load
        window.onload = function () {
            if (!db) {
                console.error("Firestore db is not initialized. Check Firebase configuration and script loading.");
                document.getElementById('no-data').innerText = 'Failed to load data. Please check Firebase configuration.';
                document.getElementById('no-data').style.display = 'block';
                return;
            }
            loadAssets();
        };

        // Load Assets from Firestore
        function loadAssets() {
            let query = db.collection('assets');

            if (searchTerm) {
                query = query.where('Name', '>=', searchTerm.toLowerCase())
                             .where('Name', '<=', searchTerm.toLowerCase() + '\uf8ff');
            }

            query.get().then(snapshot => {
                assets = [];
                snapshot.forEach(doc => {
                    const data = doc.data();
                    assets.push({
                        Id: doc.id,
                        Name: data.DisplayName,
                        DateIn: data.DateIn ? new Date(data.DateIn.seconds * 1000) : null,
                        DateOut: data.DateOut ? new Date(data.DateOut.seconds * 1000) : null,
                        Consumable: data.Consumable || '',
                        Remarks: data.Remarks || ''
                    });
                });

                // Sort
                if (sortOrder === 'name_desc') {
                    assets.sort((a, b) => b.Name.localeCompare(a.Name));
                } else {
                    assets.sort((a, b) => a.Name.localeCompare(b.Name));
                }

                totalItems = assets.length;
                totalPages = Math.ceil(totalItems / pageSize);
                currentPage = Math.max(1, Math.min(currentPage, totalPages));
                renderTable();
                updateSummary();
                updatePagination();

                if (assets.length === 0) {
                    document.getElementById('no-data').style.display = 'block';
                } else {
                    document.getElementById('no-data').style.display = 'none';
                }
            }).catch(error => {
                console.error("Error loading assets:", error);
            });
        }

        // Render Table
        function renderTable() {
            const tbody = document.getElementById('asset-table-body');
            tbody.innerHTML = '';

            const start = (currentPage - 1) * pageSize;
            const end = Math.min(start + pageSize, assets.length);

            for (let i = start; i < end; i++) {
                const asset = assets[i];
                const row = `
                    <tr>
                        <td>${asset.Name}</td>
                        <td>${asset.DateIn ? asset.DateIn.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }) : ''}</td>
                        <td>${asset.DateOut ? asset.DateOut.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }) : ''}</td>
                        <td>${asset.Consumable}</td>
                        <td>${asset.Remarks}</td>
                        <td>                       
                            <button class="btn btn-sm btn-warning me-1" data-bs-tooltop="tooltip" title="Edit" onclick="openEdit('${asset.Id}')"><i class="fas fa-edit"></i></button>
                            <button class="btn btn-sm btn-danger" data-bs-tooltop="tooltip" title="Delete" onclick="openDeleteEvent('${asset.Id}')"><i class="fas fa-trash"></i></button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            }
        }

        // Update Summary
        function updateSummary() {
            let totalAssets = assets.length;
            let consumableAssets = assets.filter(asset => asset.Consumable === 'Consumable').length;
            let nonConsumableAssets = assets.filter(asset => asset.Consumable === 'Non-Consumable').length;

            document.getElementById('total-assets').innerText = totalAssets;
            document.getElementById('consumable-assets').innerText = consumableAssets;
            document.getElementById('non-consumable-assets').innerText = nonConsumableAssets;
        }

        function updatePagination() {
            const start = currentPage === 1 ? 1 : (currentPage - 1) * pageSize + 1;
            const end = Math.min(currentPage * pageSize, totalItems);
            document.getElementById('pagination-info').innerText = `${start}-${end} of ${totalItems} | Page ${currentPage}`;

            const pagination = document.querySelector('.pagination');
            pagination.innerHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}" id="prev-page">
                    <a class="page-link" href="#" aria-label="Previous"><i class="fas fa-angle-left"></i></a>
                </li>
            `;

            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            pagination.innerHTML += `
                <li class="page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}" id="next-page">
                    <a class="page-link" href="#" aria-label="Next"><i class="fas fa-angle-right"></i></a>
                </li>
            `;

            document.querySelectorAll('#prev-page a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage > 1) changePage(currentPage - 1);
                });
            });

            document.querySelectorAll('#next-page a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) changePage(currentPage + 1);
                });
            });
        }

        function changePage(page) {
            currentPage = page;
            renderTable();
            updatePagination();
        }

        // Add Asset
        function addAsset() {
            if (!db) {
                console.error("Cannot add asset: Firestore db is not initialized");
                return;
            }
            const name = document.getElementById('add-name').value;
            const dateIn = document.getElementById('add-datein').value;
            const dateOut = document.getElementById('add-dateout').value;
            const consumable = document.getElementById('add-consumable').value;
            const remarks = document.getElementById('add-remarks').value;

            if (!name) {
                document.getElementById('add-name-error').innerText = 'Assets & Equipment is required';
                return;
            }
            if (!dateIn) {
                document.getElementById('add-datein-error').innerText = 'Date In is required';
                return;
            }
            if (!consumable) {
                document.getElementById('add-consumable-error').innerText = 'Consumable/Non is required';
                return;
            }

            const asset = {
                Name: name.toLowerCase(),
                DisplayName: name,
                DateIn: dateIn ? new Date(dateIn) : null,
                DateOut: dateOut ? new Date(dateOut) : null,
                Consumable: consumable,
                Remarks: remarks
            };

            db.collection('assets').add(asset).then(() => {
                $('#addModal').modal('hide');
                document.getElementById('add-name').value = '';
                document.getElementById('add-datein').value = '';
                document.getElementById('add-dateout').value = '';
                document.getElementById('add-consumable').value = '';
                document.getElementById('add-remarks').value = '';
                loadAssets();
            }).catch(error => {
                console.error("Error adding asset:", error);
            });
        }

        // Open Edit Modal
        function openEdit(id) {
            const asset = assets.find(a => a.Id === id);
            if (asset) {
                document.getElementById('edit-id').value = asset.Id;
                document.getElementById('edit-name').value = asset.Name;
                document.getElementById('edit-datein').value = asset.DateIn ? asset.DateIn.toISOString().split('T')[0] : '';
                document.getElementById('edit-dateout').value = asset.DateOut ? asset.DateOut.toISOString().split('T')[0] : '';
                document.getElementById('edit-consumable').value = asset.Consumable;
                document.getElementById('edit-remarks').value = asset.Remarks;
                $('#editModal').modal('show');
            }
        }

        // Update Asset
        function updateAsset() {
            if (!db) {
                console.error("Cannot update asset: Firestore db is not initialized");
                return;
            }
            const id = document.getElementById('edit-id').value;
            const name = document.getElementById('edit-name').value;
            const dateIn = document.getElementById('edit-datein').value;
            const dateOut = document.getElementById('edit-dateout').value;
            const consumable = document.getElementById('edit-consumable').value;
            const remarks = document.getElementById('edit-remarks').value;

            if (!name) {
                document.getElementById('edit-name-error').innerText = 'Assets & Equipment is required';
                return;
            }
            if (!dateIn) {
                document.getElementById('edit-datein-error').innerText = 'Date In is required';
                return;
            }
            if (!consumable) {
                document.getElementById('edit-consumable-error').innerText = 'Consumable/Non is required';
                return;
            }

            const asset = {
                Name: name.toLowerCase(),
                DisplayName: name,
                DateIn: dateIn ? new Date(dateIn) : null,
                DateOut: dateOut ? new Date(dateOut) : null,
                Consumable: consumable,
                Remarks: remarks
            };

            db.collection('assets').doc(id).update(asset).then(() => {
                $('#editModal').modal('hide');
                loadAssets();
            }).catch(error => {
                console.error("Error updating asset:", error);
            });
        }

        // Open Detail (Placeholder)
        function openDetail(id) {
            alert('Detail view for ID: ' + id);
        }
        
        // Open Delete Event Modal
        function openDeleteEvent(id) {
            document.getElementById('delete-event-id').value = id;
            $('#deleteEventModal').modal('show');
        }

        // Delete Asset
        document.getElementById('confirm-delete').addEventListener('click', function () {
            const id = document.getElementById('delete-event-id').value;
            db.collection('assets').doc(id).delete().then(() => {
                $('#deleteEventModal').modal('hide');
                loadAssets();
                showSuccess("Asset deleted successfully!");
            }).catch(error => {
                console.error("Error deleting event:", error);
                showError("Failed to delete event. Please try again.");
            });
        });

        // Show Success Message
        function showSuccess(message) {
            const successCard = document.getElementById('success-card');
            const successMessage = document.getElementById('success-message');
            if (successCard && successMessage) {
                successMessage.innerText = message;
                successCard.classList.remove('d-none');
                setTimeout(() => successCard.classList.add('d-none'), 5000);
            } else {
                console.error("Success card or message element not found");
            }
        }

        // Show Error Message
        function showError(message) {
            const container = document.getElementById('events-container');
            if (container) {
                container.innerHTML = `<p class="text-danger text-center">${message}</p>`;
            } else {
                console.error("Events container not found");
            }
        }
        
        // Search Handler
        document.addEventListener('DOMContentLoaded', () => {
            const searchForm = document.getElementById('search-form');
            if (searchForm) {
                searchForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    searchTerm = document.getElementById('search-term').value;
                    currentPage = 1;
                    window.location.href = `/Assetlist?CurrentPage=${currentPage}&SearchTerm=${searchTerm}&SortOrder=${sortOrder}`;
                });
            } else {
                console.error('Search form not found');
            }

            const sortLink = document.getElementById('sort-name');
            if (sortLink) {
                sortLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    sortOrder = sortOrder === 'name_asc' ? 'name_desc' : 'name_asc';
                    window.location.href = `/Assetlist?CurrentPage=${currentPage}&SearchTerm=${searchTerm}&SortOrder=${sortOrder}`;
                });
            } else {
                console.error('Sort link not found');
            }
        });
    </script>
}