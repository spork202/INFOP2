@page
@model INFOP2.Pages.Schedule
@{
    ViewData["Title"] = "Schedule";
    Layout = "_Layout";
}

<div class="container-fluid px-4 py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div>
                    <h2 class="fw-bold mb-1">@ViewData["Title"]</h2>
                    <p class="text-muted mb-0">Manage schedule details</p>
                </div>
                <div class="text-end">
                    <h4 class="h6 mb-1">Welcome back,</h4>
                    <p class="text-primary mb-0 fw-bold">@User.Identity?.Name</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Card -->
    <div id="success-card" class="card border-0 shadow-sm mb-4 d-none">
        <div class="card-body d-flex justify-content-between align-items-center p-3">
            <div>
                <h5 class="card-title text-success mb-1">Success!</h5>
                <p class="card-text mb-0" id="success-message">Action completed successfully!</p>
            </div>
            <button type="button" class="btn-close" aria-label="Close" onclick="$('#success-card').addClass('d-none');"></button>
        </div>
    </div>

    <!-- Toolbar -->
    <div class="col-md-6 ms-auto d-flex justify-content-end gap-2">
        <button class="btn btn-success d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#addDriverModal">
            <i class="fa-solid fa-plus me-md-2"></i>
            <span class="d-none d-md-inline">Add Driver</span>
        </button>
        <button class="btn btn-primary d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#addEventModal">
            <i class="fa-solid fa-calendar-plus me-md-2"></i> 
            <span class="d-none d-md-inline">Create Event</span>
        </button>
        <button class="btn btn-outline-secondary d-flex align-items-center" id="exportBtnSched" data-bs-tooltip="tooltip" title="Export to Excel">
            <i class="fa-solid fa-download me-md-2"></i>
            <span class="d-none d-md-inline">Export</span>
        </button>
    </div>

    <!-- Schedule Events Container -->
    <div class="col-md-12 py-3" id="events-container" >
        <!-- Dynamically populated by JavaScript -->
    </div>
</div>

<!-- Modal: Add Driver -->
<div class="modal fade" id="addDriverModal" tabindex="-1" aria-labelledby="addDriverModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-success text-white rounded-top">
                <h5 class="modal-title">Add New Driver</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="add-driver-form">
                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Driver Name</label>
                        <input type="text" class="form-control" id="add-driver-name" placeholder="Enter driver name" required />
                        <span class="text-danger small" id="add-driver-name-error"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Contact Number</label>
                        <input type="text" class="form-control" id="add-driver-contact" placeholder="+966 5xx xxx xxx" />
                        <span class="text-danger small" id="add-driver-contact-error"></span>
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Add Driver</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal: Edit Driver -->
<div class="modal fade" id="editDriverModal" tabindex="-1" aria-labelledby="editDriverModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white rounded-top">
                <h5 class="modal-title">Edit Driver</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="edit-driver-form">
                <div class="modal-body p-4">
                    <input type="hidden" id="edit-driver-id" />
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Driver Name</label>
                        <input type="text" class="form-control" id="edit-driver-name" required />
                        <span class="text-danger small" id="edit-driver-name-error"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Contact Number</label>
                        <input type="text" class="form-control" id="edit-driver-contact" />
                        <span class="text-danger small" id="edit-driver-contact-error"></span>
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal: Schedule Event -->
<div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white rounded-top">
                <h5 class="modal-title">Add Schedule Event</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="add-event-form">
                <div class="modal-body p-4">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Event</label>
                            <input type="text" class="form-control" id="add-event-event" required />
                            <span class="text-danger small" id="add-event-event-error"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Subject</label>
                            <input type="text" class="form-control" id="add-event-subject" required />
                            <span class="text-danger small" id="add-event-subject-error"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Date and Time</label>
                            <input type="datetime-local" class="form-control" id="add-event-datetime" required />
                            <span class="text-danger small" id="add-event-datetime-error"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Status</label>
                            <select class="form-select" id="add-event-status" required>
                                <option value="" selected disabled>Select status</option>
                                <option value="Scheduled">Scheduled</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                            <span class="text-danger small" id="add-event-status-error"></span>
                        </div>
                        <!-- Drivers Section -->
                        <div class="col-12">
                            <label class="form-label fw-semibold">Drivers</label>
                            <div id="add-event-drivers" class="border p-3 rounded">
                                <!-- Dynamically added driver fields -->
                            </div>
                            <button type="button" class="btn btn-outline-primary btn-sm mt-2 d-flex align-items-center" onclick="addDriver('add')">
                                <i class="fa fa-plus me-2"></i>Add Driver
                            </button>
                            <span class="text-danger small" id="add-event-drivers-error"></span>
                        </div>
                        
                        <!-- Programs Section -->
                        <div class="col-12">
                            <label class="form-label fw-semibold">Programs</label>
                            <div id="add-event-programs" class="border p-3 rounded">
                                <!-- Dynamically added program fields -->
                            </div>
                            <button type="button" class="btn btn-outline-primary btn-sm mt-2 d-flex align-items-center" onclick="addProgram('add')">
                                <i class="fa fa-plus me-2"></i>Add Program
                            </button>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Note</label>
                            <input type="text" class="form-control" id="add-event-note" />
                        </div>
                        <div class="col-md-12">
                            <label class="form-label fw-semibold">Remarks</label>
                            <textarea class="form-control" id="add-event-remarks" rows="2"></textarea>
                        </div>
                        <div class="col-md-12">
                            <label class="form-label fw-semibold">Closing Notes</label>
                            <textarea class="form-control" id="add-event-closing-notes" rows="2"></textarea>
                        </div>
                        <div class="col-md-12">
                            <label class="form-label fw-semibold">Bible Verse</label>
                            <textarea class="form-control" id="add-event-verse" rows="3" placeholder="Enter a Bible verse (e.g., For God so loved the world... — John 3:16)"></textarea>
                            <span class="text-danger small" id="add-event-verse-error"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Event</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal: Edit Schedule Event -->
<div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white rounded-top">
                <h5 class="modal-title">Edit Schedule Event</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="edit-event-form">
                <div class="modal-body p-4">
                    <input type="hidden" id="edit-event-id" />
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Event</label>
                            <input type="text" class="form-control" id="edit-event-event" required />
                            <span class="text-danger small" id="edit-event-event-error"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Subject</label>
                            <input type="text" class="form-control" id="edit-event-subject" required />
                            <span class="text-danger small" id="edit-event-subject-error"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Date and Time</label>
                            <input type="datetime-local" class="form-control" id="edit-event-datetime" required />
                            <span class="text-danger small" id="edit-event-datetime-error"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Status</label>
                            <select class="form-select" id="edit-event-status" required>
                                <option value="" selected disabled>Select status</option>
                                <option value="Scheduled">Scheduled</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                            <span class="text-danger small" id="edit-event-status-error"></span>
                        </div>
                        <!-- Drivers Section -->
                        <div class="col-12">
                            <label class="form-label fw-semibold">Drivers</label>
                            <div id="edit-event-drivers" class="border p-3 rounded">
                                <!-- Dynamically added driver fields -->
                            </div>
                            <button type="button" class="btn btn-outline-primary btn-sm mt-2 d-flex align-items-center" onclick="addDriver('edit')">
                                <i class="fa fa-plus me-2"></i>Add Driver
                            </button>
                            <span class="text-danger small" id="edit-event-drivers-error"></span>
                        </div>
                       
                        <!-- Programs Section -->
                        <div class="col-12">
                            <label class="form-label fw-semibold">Programs</label>
                            <div id="edit-event-programs" class="border p-3 rounded">
                                <!-- Dynamically added program fields -->
                            </div>
                            <button type="button" class="btn btn-outline-primary btn-sm mt-2 d-flex align-items-center" onclick="addProgram('edit')">
                                <i class="fa fa-plus me-2"></i>Add Program
                            </button>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">Note</label>
                            <input type="text" class="form-control" id="edit-event-note" />
                        </div>
                        <div class="col-md-12">
                            <label class="form-label fw-semibold">Remarks</label>
                            <textarea class="form-control" id="edit-event-remarks" rows="2"></textarea>
                        </div>
                        <div class="col-md-12">
                            <label class="form-label fw-semibold">Closing Notes</label>
                            <textarea class="form-control" id="edit-event-closing-notes" rows="2"></textarea>
                        </div>
                        <div class="col-md-12">
                            <label class="form-label fw-semibold">Bible Verse</label>
                            <textarea class="form-control" id="edit-event-verse" rows="3"></textarea>
                            <span class="text-danger small" id="edit-event-verse-error"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light rounded-bottom">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Event Modal -->
<div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-danger text-white rounded-top">
                <h5 class="modal-title" id="deleteEventModalLabel">Delete Schedule Event</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4 text-center">
                <i class="fa-solid fa-triangle-exclamation text-danger fa-3x mb-3"></i>
                <p class="mb-0">Are you sure you want to delete this schedule event?</p>
                <p class="text-muted small">This action cannot be undone.</p>
                <input type="hidden" id="delete-event-id" />
            </div>
            <div class="modal-footer bg-light rounded-bottom">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Font Awesome (for icons) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <!-- Firebase Config and JavaScript Logic -->
    <script>
        // Pass FirebaseConfigJson to JavaScript
        const firebaseConfig = @Html.Raw(Model.FirebaseConfigJson);

        // Initialize Firebase
        let db = null;
        try {
            console.log("Firebase Config:", firebaseConfig);
            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                throw new Error("Firebase configuration is empty or invalid");
            }
            const app = firebase.initializeApp(firebaseConfig);
            db = firebase.firestore();
            console.log("Firebase initialized successfully, db:", !!db);
        } catch (error) {
            console.error("Firebase initialization error:", error);
        }

        // Global arrays to store drivers, people, and events
        let drivers = [];
        let people = [];
        let events = [];

        // Load data on page load
        window.onload = function () {
            loadDrivers();
            loadPeople();
            loadEvents();
        };

        // Load Drivers from Firestore
        function loadDrivers() {
            db.collection('drivers').get().then(snapshot => {
                drivers = [];
                snapshot.forEach(doc => {
                    const data = doc.data();
                    drivers.push({
                        Id: doc.id,
                        Name: data.Name,
                        Contact: data.Contact || ''
                    });
                });
                populateSelects();
            }).catch(error => {
          
                showError("Failed to load drivers. Please try again.");
            });
        }

        // Load People from Firestore
        function loadPeople() {
            db.collection('people').get().then(snapshot => {
                people = [];
                snapshot.forEach(doc => {
                    const data = doc.data();
                    people.push({
                        Id: doc.id,
                        Name: data.Name
                    });
                });
                populateSelects();
            }).catch(error => {
            
                showError("Failed to load passengers. Please try again.");
            });
        }

        // Load Schedule Events from Firestore
        function loadEvents() {
            db.collection('transport_events').get().then(snapshot => {
                events = [];
                snapshot.forEach(doc => {
                    const data = doc.data();
                    events.push({
                        Id: doc.id,
                        Event: data.Event || '',
                        Subject: data.Subject,
                        DateTime: data.DateTime || '',
                        Status: data.Status || 'Scheduled',
                        Note: data.Note || '',
                        Drivers: data.Drivers || [],
                        Passengers: data.Passengers || [],
                        Programs: data.Programs || [],
                        Remarks: data.Remarks || '',
                        ClosingNotes: data.ClosingNotes || '',
                        Verse: data.Verse || '',
                        userId: data.userId || null
                    });
                });
                renderEvents();
                if (events.length === 0) {
                    document.getElementById('events-container').innerHTML = '<p class="text-muted text-center">No transport events found. Create one to start.</p>';
                }
            }).catch(error => {
                console.error("Error loading events:", error);
                document.getElementById('events-container').innerHTML = '<p class="text-danger text-center">Failed to load events. Please try again.</p>';
            });
        }

        

        // Add Driver Field Dynamically
        function addDriver(modalType, driver = { DriverId: '', AssignedPassengers: [] }) {
            const container = document.getElementById(`${modalType}-event-drivers`);
            const driverId = `driver-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            const driverHtml = `
                <div class="driver-entry mb-3 border p-3 rounded" id="${driverId}">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="form-label mb-0">Driver</label>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeDriver('${driverId}')">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                    <select class="form-select driver-id mb-2" required>
                        <option value="" selected disabled>Select driver</option>
                        ${drivers.map(d => `
                            <option value="${d.Id}" ${d.Id === driver.DriverId ? 'selected' : ''}>
                                ${d.Name}
                            </option>
                        `).join('')}
                    </select>
                    <label class="form-label">Assigned Passengers</label>
                    <select class="form-select driver-passengers" multiple>
                        ${people.map(person => `
                            <option value="${person.Name}" ${driver.AssignedPassengers.includes(person.Name) ? 'selected' : ''}>
                                ${person.Name}
                            </option>
                        `).join('')}
                    </select>
                    <small class="text-muted">Hold Ctrl (Cmd on Mac) to select multiple</small>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', driverHtml);
        }

        // Remove Driver Field
        function removeDriver(driverId) {
            const driverElement = document.getElementById(driverId);
            if (driverElement) {
                driverElement.remove();
            }
        }

        // Add Program Field Dynamically
        function addProgram(modalType, program = { Name: '', AssignedPeople: [] }) {
            const container = document.getElementById(`${modalType}-event-programs`);
            const programId = `program-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            const programHtml = `
                <div class="program-entry mb-3 border p-3 rounded" id="${programId}">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="form-label mb-0">Program Name</label>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeProgram('${programId}')">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                    <input type="text" class="form-control mb-2 program-name" value="${program.Name}" required />
                    <label class="form-label">Assigned People</label>
                    <select class="form-select program-person" multiple>
                        ${people.map(person => `
                            <option value="${person.Name}" ${program.AssignedPeople.includes(person.Name) ? 'selected' : ''}>
                                ${person.Name}
                            </option>
                        `).join('')}
                    </select>
                    <small class="text-muted">Hold Ctrl (Cmd on Mac) to select multiple</small>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', programHtml);
        }

        // Remove Program Field
        function removeProgram(programId) {
            const programElement = document.getElementById(programId);
            if (programElement) {
                programElement.remove();
            }
        }

        // Render Schedule Events
        function renderEvents() {
            const container = document.getElementById('events-container');
            if (!container) {
                console.error("Element with ID 'events-container' not found");
                return;
            }
            container.innerHTML = '';
            events.forEach(event => {
                const driversList = event.Drivers.length > 0
                    ? event.Drivers.map(d => {
                        const driver = drivers.find(driver => driver.Id === d.DriverId);
                        const passengers = d.AssignedPassengers.join(', ') || 'None';
                        return `
                            <div class="driver-entry">
                                ${driver ? driver.Name : 'Unknown'}
                                <div class="passengers">${passengers}</div>
                            </div>
                        `;
                    }).join('')
                    : 'None';
                const programsList = event.Programs.length > 0
                    ? event.Programs.map(p => `
                        <div class="program-entry">
                            ${p.Name}
                            <div class="assigned-people">${p.AssignedPeople.join(', ') || 'None'}</div>
                        </div>
                    `).join('')
                    : 'None';
                const card = `
                    <div class="card border-0 shadow-sm rounded-4 mb-4" data-id="${event.Id}">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center bd-unset">
                            <div>
                                <strong>Event:</strong> ${event.Event || 'N/A'}<br />
                                <strong>Subject:</strong> ${event.Subject}<br />
                                <strong>Date & Time:</strong> ${event.DateTime ? new Date(event.DateTime).toLocaleString() : 'N/A'}<br />
                                <strong>Status:</strong> ${event.Status}<br />
                                <strong>Drivers:</strong><div class="drivers-list">${driversList}</div>
                                
                                <strong>Programs:</strong><div class="programs-list">${programsList}</div>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-info me-1 copy-btn" data-bs-tooltip="tooltip" title="Copy this event" onclick="copyEvent('${event.Id}', this)">
                                    <i class="fa-solid fa-copy"></i>
                                </button>
                                <button class="btn btn-sm btn-warning me-1" data-bs-tooltip="tooltip" title="Edit" onclick="openEditEvent('${event.Id}')">
                                    <i class="fa-solid fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" data-bs-tooltip="tooltip" title="Delete" onclick="openDeleteEvent('${event.Id}')">
                                    <i class="fa-solid fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="mb-2"><strong>Note:</strong> ${event.Note || 'N/A'}</div>
                            <div class="mb-2"><strong>Remarks:</strong> ${event.Remarks || 'N/A'}</div>
                            <div class="mb-2"><strong>Closing Notes:</strong> ${event.ClosingNotes || 'N/A'}</div>
                            <div><strong>Bible Verse:</strong> <em>${event.Verse || 'N/A'}</em></div>
                        </div>
                    </div>
                `;
                container.innerHTML += card;
            });
        }

        // Copy Single Event
        function copyEvent(eventId, button) {
            const event = events.find(e => e.Id === eventId);
            if (!event) {
                showError('Event not found.');
                return;
            }

            // Format event data in a messenger-friendly format
            const dateTime = event.DateTime ? new Date(event.DateTime).toLocaleString('en-US', { dateStyle: 'short', timeStyle: 'short' }) : 'N/A';
            const driversList = event.Drivers.length > 0
                ? event.Drivers.map(d => {
                    const driver = drivers.find(driver => driver.Id === d.DriverId);
                    const passengers = d.AssignedPassengers.length > 0 ? d.AssignedPassengers.join(', ') : 'None';
                    return [
                        `      · ${driver ? driver.Name : 'Unknown'}`,
                        `        - Passengers: ${passengers}`
                    ].join('\n');
                }).join('\n')
                : 'None';
            const passengers = event.Passengers.length > 0 ? event.Passengers.join(', ') : 'None';
            const programsList = event.Programs.length > 0
                ? event.Programs.map(p => [
                    `      · ${p.Name || 'N/A'}`,
                    `        - Assigned People: ${p.AssignedPeople.length > 0 ? p.AssignedPeople.join(', ') : 'None'}`
                ].join('\n')).join('\n')
                : 'None';

            const textToCopy = [
                `• Event: ${event.Event || 'N/A'}`,
                `  - Subject: ${event.Subject || 'N/A'}`,
                `  - Date & Time: ${dateTime}`,
                `  - Status: ${event.Status || 'N/A'}`,
                `  - Note: ${event.Note || 'N/A'}`,
                `  - Drivers:\n${driversList}`,
                `  - Programs:\n${programsList}`,
                `  - Remarks: ${event.Remarks || 'N/A'}`,
                `  - Closing Notes: ${event.ClosingNotes || 'N/A'}`,
                `  - Bible Verse: ${event.Verse || 'N/A'}`
            ].join('\n');

            // Use Clipboard API to copy text
            navigator.clipboard.writeText(textToCopy).then(() => {
                // Create feedback element
                const feedback = document.createElement('span');
                feedback.className = 'copy-feedback';
                feedback.innerText = 'Copied!';
                button.parentElement.appendChild(feedback);

                // Position feedback near the button
                const rect = button.getBoundingClientRect();
                feedback.style.top = `${rect.top - 30}px`;
                feedback.style.left = `${rect.left + rect.width / 2}px`;

                // Show feedback
                feedback.classList.add('show');

                // Remove feedback after 2 seconds
                setTimeout(() => {
                    feedback.classList.remove('show');
                    setTimeout(() => feedback.remove(), 300); // Wait for fade-out transition
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy event:', err);
                showError('Failed to copy event data.');
            });
        }

        // Add Driver
        document.getElementById('add-driver-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const name = document.getElementById('add-driver-name').value.trim();
            const contact = document.getElementById('add-driver-contact').value.trim();

            // Reset errors
            document.getElementById('add-driver-name-error').innerText = '';
            document.getElementById('add-driver-contact-error').innerText = '';

            if (!name) {
                document.getElementById('add-driver-name-error').innerText = 'Driver name is required';
                return;
            }

            const driver = {
                Name: name,
                Contact: contact,
                userId: null
            };

            db.collection('drivers').add(driver).then(() => {
                $('#addDriverModal').modal('hide');
                document.getElementById('add-driver-form').reset();
                loadDrivers();
                showSuccess("Driver added successfully!");
            }).catch(error => {
                console.error("Error adding driver:", error);
                showError("Failed to add driver. Please try again.");
            });
        });

        // Edit Driver
        function openEditDriver(id) {
            const driver = drivers.find(d => d.Id === id);
            if (driver) {
                document.getElementById('edit-driver-id').value = driver.Id;
                document.getElementById('edit-driver-name').value = driver.Name;
                document.getElementById('edit-driver-contact').value = driver.Contact;
                $('#editDriverModal').modal('show');
            }
        }

        document.getElementById('edit-driver-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const id = document.getElementById('edit-driver-id').value;
            const name = document.getElementById('edit-driver-name').value.trim();
            const contact = document.getElementById('edit-driver-contact').value.trim();

            // Reset errors
            document.getElementById('edit-driver-name-error').innerText = '';
            document.getElementById('edit-driver-contact-error').innerText = '';

            if (!name) {
                document.getElementById('edit-driver-name-error').innerText = 'Driver name is required';
                return;
            }

            const driver = {
                Name: name,
                Contact: contact,
                userId: null
            };

            db.collection('drivers').doc(id).update(driver).then(() => {
                $('#editDriverModal').modal('hide');
                loadDrivers();
                showSuccess("Driver updated successfully!");
            }).catch(error => {
                console.error("Error updating driver:", error);
                showError("Failed to update driver. Please try again.");
            });
        });

        // Add Schedule Event
        document.getElementById('add-event-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const eventName = document.getElementById('add-event-event').value.trim();
            const subject = document.getElementById('add-event-subject').value.trim();
            const dateTime = document.getElementById('add-event-datetime').value;
            const status = document.getElementById('add-event-status').value;
            const note = document.getElementById('add-event-note').value.trim();
            const driversData = Array.from(document.querySelectorAll('#add-event-drivers .driver-entry')).map(entry => ({
                DriverId: entry.querySelector('.driver-id').value,
                AssignedPassengers: Array.from(entry.querySelector('.driver-passengers').selectedOptions).map(option => option.value)
            })).filter(driver => driver.DriverId);
          
            const programs = Array.from(document.querySelectorAll('#add-event-programs .program-entry')).map(entry => ({
                Name: entry.querySelector('.program-name').value.trim(),
                AssignedPeople: Array.from(entry.querySelector('.program-person').selectedOptions).map(option => option.value)
            })).filter(program => program.Name);
            const remarks = document.getElementById('add-event-remarks').value.trim();
            const closingNotes = document.getElementById('add-event-closing-notes').value.trim();
            const verse = document.getElementById('add-event-verse').value.trim();

            // Reset errors
            document.getElementById('add-event-event-error').innerText = '';
            document.getElementById('add-event-subject-error').innerText = '';
            document.getElementById('add-event-datetime-error').innerText = '';
            document.getElementById('add-event-status-error').innerText = '';
            document.getElementById('add-event-drivers-error').innerText = '';
            document.getElementById('add-event-verse-error').innerText = '';

            if (!eventName) {
                document.getElementById('add-event-event-error').innerText = 'Event name is required';
                return;
            }
            if (!subject) {
                document.getElementById('add-event-subject-error').innerText = 'Subject is required';
                return;
            }
            if (!dateTime) {
                document.getElementById('add-event-datetime-error').innerText = 'Date and time are required';
                return;
            }
            if (!status) {
                document.getElementById('add-event-status-error').innerText = 'Status is required';
                return;
            }
            if (driversData.length === 0) {
                document.getElementById('add-event-drivers-error').innerText = 'At least one driver is required';
                return;
            }

            const event = {
                Event: eventName,
                Subject: subject,
                DateTime: dateTime,
                Status: status,
                Note: note,
                Drivers: driversData,
                Programs: programs,
                Remarks: remarks,
                ClosingNotes: closingNotes,
                Verse: verse,
                userId: null
            };

            db.collection('transport_events').add(event).then(() => {
                $('#addEventModal').modal('hide');
                document.getElementById('add-event-form').reset();
                document.getElementById('add-event-drivers').innerHTML = '';
                document.getElementById('add-event-programs').innerHTML = '';
                loadEvents();
                showSuccess("Schedule event added successfully!");
            }).catch(error => {
                console.error("Error adding event:", error);
                showError("Failed to add event. Please try again.");
            });
        });

        // Edit Schedule Event
        function openEditEvent(id) {
            const event = events.find(e => e.Id === id);
            if (event) {
                document.getElementById('edit-event-id').value = event.Id;
                document.getElementById('edit-event-event').value = event.Event;
                document.getElementById('edit-event-subject').value = event.Subject;
                document.getElementById('edit-event-datetime').value = event.DateTime;
                document.getElementById('edit-event-status').value = event.Status;
                document.getElementById('edit-event-note').value = event.Note;
                const driversContainer = document.getElementById('edit-event-drivers');
                driversContainer.innerHTML = '';
                event.Drivers.forEach(driver => addDriver('edit', driver));
                const passengerSelect = document.getElementById('edit-event-passengers');
            
                const programsContainer = document.getElementById('edit-event-programs');
                programsContainer.innerHTML = '';
                event.Programs.forEach(program => addProgram('edit', program));
                document.getElementById('edit-event-remarks').value = event.Remarks;
                document.getElementById('edit-event-closing-notes').value = event.ClosingNotes;
                document.getElementById('edit-event-verse').value = event.Verse;
                $('#editEventModal').modal('show');
            }
        }

        document.getElementById('edit-event-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const id = document.getElementById('edit-event-id').value;
            const eventName = document.getElementById('edit-event-event').value.trim();
            const subject = document.getElementById('edit-event-subject').value.trim();
            const dateTime = document.getElementById('edit-event-datetime').value;
            const status = document.getElementById('edit-event-status').value;
            const note = document.getElementById('edit-event-note').value.trim();
            const driversData = Array.from(document.querySelectorAll('#edit-event-drivers .driver-entry')).map(entry => ({
                DriverId: entry.querySelector('.driver-id').value,
                AssignedPassengers: Array.from(entry.querySelector('.driver-passengers').selectedOptions).map(option => option.value)
            })).filter(driver => driver.DriverId);
            
            const programs = Array.from(document.querySelectorAll('#edit-event-programs .program-entry')).map(entry => ({
                Name: entry.querySelector('.program-name').value.trim(),
                AssignedPeople: Array.from(entry.querySelector('.program-person').selectedOptions).map(option => option.value)
            })).filter(program => program.Name);
            const remarks = document.getElementById('edit-event-remarks').value.trim();
            const closingNotes = document.getElementById('edit-event-closing-notes').value.trim();
            const verse = document.getElementById('edit-event-verse').value.trim();

            // Reset errors
            document.getElementById('edit-event-event-error').innerText = '';
            document.getElementById('edit-event-subject-error').innerText = '';
            document.getElementById('edit-event-datetime-error').innerText = '';
            document.getElementById('edit-event-status-error').innerText = '';
            document.getElementById('edit-event-drivers-error').innerText = '';
            document.getElementById('edit-event-verse-error').innerText = '';

            if (!eventName) {
                document.getElementById('edit-event-event-error').innerText = 'Event name is required';
                return;
            }
            if (!subject) {
                document.getElementById('edit-event-subject-error').innerText = 'Subject is required';
                return;
            }
            if (!dateTime) {
                document.getElementById('edit-event-datetime-error').innerText = 'Date and time are required';
                return;
            }
            if (!status) {
                document.getElementById('edit-event-status-error').innerText = 'Status is required';
                return;
            }
            if (driversData.length === 0) {
                document.getElementById('edit-event-drivers-error').innerText = 'At least one driver is required';
                return;
            }

            const event = {
                Event: eventName,
                Subject: subject,
                DateTime: dateTime,
                Status: status,
                Note: note,
                Drivers: driversData,
                Programs: programs,
                Remarks: remarks,
                ClosingNotes: closingNotes,
                Verse: verse,
                userId: null
            };

            db.collection('transport_events').doc(id).update(event).then(() => {
                $('#editEventModal').modal('hide');
                loadEvents();
                showSuccess("Schedule event updated successfully!");
            }).catch(error => {
                console.error("Error updating event:", error);
                showError("Failed to update event. Please try again.");
            });
        });

        // Open Delete Event Modal
        function openDeleteEvent(id) {
            document.getElementById('delete-event-id').value = id;
            $('#deleteEventModal').modal('show');
        }
        
        // Delete Prayer Event
        document.getElementById('confirm-delete').addEventListener('click', function () {
            const id = document.getElementById('delete-event-id').value;
            db.collection('transport_events').doc(id).delete().then(() => {
                $('#deleteEventModal').modal('hide');
                loadEvents();
                showSuccess("Schedule event deleted successfully!");
            }).catch(error => {
                console.error("Error deleting event:", error);
                showError("Failed to delete event. Please try again.");
            });
        });

        // Show Success Message
        function showSuccess(message) {
            const successCard = document.getElementById('success-card');
            const successMessage = document.getElementById('success-message');
            if (successCard && successMessage) {
                successMessage.innerText = message;
                successCard.classList.remove('d-none');
                setTimeout(() => successCard.classList.add('d-none'), 5000);
            } else {
                console.error("Success card or message element not found");
            }
        }

        // Show Error Message
        function showError(message) {
            const container = document.getElementById('events-container');
            if (container) {
                container.innerHTML = `<p class="text-danger text-center">${message}</p>`;
            } else {
                console.error("Events container not found");
            }
        }
    </script>
}